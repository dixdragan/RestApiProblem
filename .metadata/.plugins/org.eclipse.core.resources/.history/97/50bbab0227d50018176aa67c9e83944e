package com.dx.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
	    auth.inMemoryAuthentication()
	        .withUser("admin").password(encoder().encode("admin")).roles("ADMIN")
	        .and()
	        .withUser("user").password(encoder().encode("user")).roles("USER");
	}
	
	@Override
    protected void configure(HttpSecurity http) throws Exception {
  
	    http
	    .csrf().disable()
	    .exceptionHandling()
	    .authenticationEntryPoint(getBasicAuthEntryPoint())
	    .and()
	    .authorizeRequests()
	    .antMatchers("/secured/**").authenticated()
	    .antMatchers("/admin/**").hasRole("ADMIN")
	    .and()
	    .formLogin()
	    .successHandler(getSuccessHandler())
//	    .failureHandler(myFailureHandler)
	    .and()
	    .logout();
	    
//      http.csrf().disable()
//        .authorizeRequests()
//        .antMatchers("/secured/**").hasRole("ADMIN")
//        .and().httpBasic().realmName(REALM).authenticationEntryPoint(getBasicAuthEntryPoint())
//        .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);//We don't need sessions to be created.
    }

	@Bean
	public AuthenticationSuccessHandler getSuccessHandler() {
		return new  AuthenticationSuccessHandler();
	}

	@Bean
	public CustomBasicAuthenticationEntryPoint getBasicAuthEntryPoint() {
        return new CustomBasicAuthenticationEntryPoint();
	}
	
	@Bean
	public PasswordEncoder  encoder() {
	    return new BCryptPasswordEncoder();
	}
	
	/* To allow Pre-flight [OPTIONS] request from browser */
    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers(HttpMethod.OPTIONS, "/**");
    }
}
